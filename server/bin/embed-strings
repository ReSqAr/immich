#!/bin/sh

# =====================================================
# embed-strings
#
# Description:
#   Embeds the contents of all files in a specified
#   source directory into a TypeScript file as exported
#   constants. Each file's name is converted to camelCase
#   to serve as the variable name.
#
# Usage:
#   ./embed-strings -s <source_directory> -o <output_file>
#
# Example:
#   ./embed-strings -s ./assets -o ./src/embeddedStrings.ts
#
# =====================================================

# Function to display usage information
usage() {
    echo "Usage: $0 -s <source_directory> -o <output_file>"
    echo ""
    echo "Options:"
    echo "  -s, --source    Source directory containing files to embed"
    echo "  -o, --output    Output TypeScript file path"
    echo "  -h, --help      Display this help message"
    exit 1
}

# Function to convert a string to camelCase
camel_case() {
    echo "$1" | awk '{
        n = split(tolower($0), parts, /[^a-z0-9]+/);
        if(n < 1) { print ""; exit }
        res = parts[1]
        for(i=2;i<=n;i++) {
            if(length(parts[i]) > 0){
                res = res sprintf("%s", toupper(substr(parts[i],1,1))) substr(parts[i],2)
            }
        }
        print res
    }'
}

# Initialize variables
SOURCE_DIR=""
OUTPUT_FILE=""

# Parse command-line arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
        -s|--source)
            SOURCE_DIR="$2"
            shift 2
            ;;
        -o|--output)
            OUTPUT_FILE="$2"
            shift 2
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "Error: Unknown option '$1'"
            usage
            ;;
    esac
done

# Validate required arguments
if [ -z "$SOURCE_DIR" ] || [ -z "$OUTPUT_FILE" ]; then
    echo "Error: Both --source and --output options are required."
    usage
fi

# Check if source directory exists and is a directory
if [ ! -d "$SOURCE_DIR" ]; then
    echo "Error: Source directory '$SOURCE_DIR' does not exist or is not a directory."
    exit 1
fi

# Initialize output content with header
{
    echo "// *****************************************************"
    echo "// This file is auto-generated by embed-strings."
    echo "// Command: $0 -s $SOURCE_DIR -o $OUTPUT_FILE"
    echo "// *****************************************************"
} > "$OUTPUT_FILE"

FILE_COUNT=0

# Iterate over each file in the source directory (non-recursive)
for file in "$SOURCE_DIR"/*; do
    # Check if it's a regular file
    if [ ! -f "$file" ]; then
        continue
    fi

    # Extract the base filename without extension
    filename=$(basename "$file")
    base="${filename%.*}"

    # Convert the base filename to camelCase
    varName=$(camel_case "$base")

    # Read file content and escape backticks
    content=$(sed 's/`/\\`/g' "$file")

    # Append the export statement to the output file
    {
        printf "\nexport const %s = \`%s\`;\n" "$varName" "$content"
    } >> "$OUTPUT_FILE"

    FILE_COUNT=$((FILE_COUNT + 1))
done

# Check if no files were embedded
if [ "$FILE_COUNT" -eq 0 ]; then
    echo "Warning: No files found in '$SOURCE_DIR' to embed."
else
    echo "Embedded $FILE_COUNT file(s) into '$OUTPUT_FILE'."
fi
