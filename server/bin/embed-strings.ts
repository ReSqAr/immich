// embedStrings.ts
import { Command } from 'commander';
import * as fs from 'fs';
import * as path from 'path';

// Initialize the command-line interface
const program = new Command();

program
  .requiredOption('-s, --source <source>', 'Source directory containing files to embed')
  .requiredOption('-o, --output <output>', 'Output TypeScript file path')
  .option('-e, --extensions <extensions>', 'Comma-separated list of file extensions to include', 'txt,html,svg,sql')
  .parse(process.argv);

const options = program.opts();

const sourceDir = path.resolve(process.cwd(), options.source);
const outputFile = path.resolve(process.cwd(), options.output);
const extensions = options.extensions.split(',').map((ext: string) => ext.trim().toLowerCase());

// Validate source directory
if (!fs.existsSync(sourceDir) || !fs.statSync(sourceDir).isDirectory()) {
  console.error(`Error: Source directory "${sourceDir}" does not exist or is not a directory.`);
  process.exit(1);
}

// Function to convert strings to camelCase
function toCamelCase(str: string): string {
  return str
    .replace(/[-_ ]+([a-zA-Z0-9])/g, (_, char) => char.toUpperCase())
    .replace(/^[A-Z]/, (match) => match.toLowerCase());
}

// Read all files in the source directory (non-recursive)
function getFiles(dir: string, extList: string[]): string[] {
  return fs
    .readdirSync(dir)
    .filter((file) => {
      const filePath = path.join(dir, file);
      const stat = fs.statSync(filePath);
      const fileExt = path.extname(file).slice(1).toLowerCase();
      return stat.isFile() && extList.includes(fileExt);
    })
    .map((file) => path.join(dir, file));
}

const files = getFiles(sourceDir, extensions);

if (files.length === 0) {
  console.warn(`Warning: No files with extensions [${extensions.join(', ')}] found in "${sourceDir}".`);
}

// Generate export statements
let outputContent = `// *****************************************************\n`;
outputContent += `// This file is auto-generated by embedStrings.ts.\n`;
outputContent += `// Command: npx ts-node embedStrings.ts -s ${options.source} -o ${options.output}\n`;
outputContent += `// *****************************************************\n\n`;

files.forEach((filePath) => {
  const fileName = path.basename(filePath, path.extname(filePath));
  const varName = toCamelCase(fileName);
  const fileContent = fs.readFileSync(filePath, 'utf8').replace(/`/g, '\\`');
  outputContent += `export const ${varName} = \`${fileContent}\`;\n\n`;
});

// Write to the output file
fs.writeFileSync(outputFile, outputContent, 'utf8');
console.log(`Embedded ${files.length} file(s) into "${outputFile}".`);
